'use strict';

const parallel = require('fastparallel')();
const _FijqApBnP = require('/Users/ritazerrizuela/Documents/Projects/iris/iris/example/handlers/handler1.js');
const _piXq0FN6y = require('/Users/ritazerrizuela/Documents/Projects/iris/iris/example/hooks/hook1.js');
const _piEg0QunP = require('/Users/ritazerrizuela/Documents/Projects/iris/iris/example/hooks/hook2.js');
const _FwVgPpt6P = require('/Users/ritazerrizuela/Documents/Projects/iris/iris/example/handlers/handler1.js');
const _pi4mAQuny = require('/Users/ritazerrizuela/Documents/Projects/iris/iris/example/hooks/hook1.js');
const _FwzhPzN60 = require('/Users/ritazerrizuela/Documents/Projects/iris/iris/example/hooks/hook2.js');

module.exports = (data, done) => {
    var response;

    switch (data.tag) {
        case 'tag1':
            parallel({}, [_piXq0FN6y.run], data, () => {});

            response = _FijqApBnP.handle(data);
            if (response) {
                parallel({}, [_piEg0QunP.run], response, () => {});

                let message = {message: response, tag: data.tag, meta: data.meta};
                done(message);
            }
            else done(false);
            break;
        case 'tag2':
            parallel({}, [_pi4mAQuny.run], data, () => {});

            response = _FwVgPpt6P.handle(data);
            if (response) {
                parallel({}, [_FwzhPzN60.run], response, () => {});

                let message = {message: response, tag: data.tag, meta: data.meta};
                done(message);
            }
            else done(false);
            break;
    }
};
